//------------------------------------------------------------------
//-- File generated by RobustVerilog parser
//-- RobustVerilog version 1.2g (limited free version)
//-- Invoked Tue Jul 21 10:04:40 2020
//-- Source file: axi2apb_mux.v
//-- Parent file: axi2apb.v
//-- Run directory: C:/RobustVerilog_free1.2_win/
//-- Target directory: out/
//-- Command flags: src/base/axi2apb.v -od out -I src/gen -list list.txt -listpath -header -gui 
//-- www.provartec.com/edatools ... info@provartec.com
//------------------------------------------------------------------





module  axi2apb_mux (clk,reset,cmd_addr,psel,prdata,pready,pslverr,psel0,psel1,psel2,psel3,psel4,psel5,pready0,pready1,pready2,pready3,pready4,pready5,pslverr0,pslverr1,pslverr2,pslverr3,pslverr4,pslverr5,prdata0,prdata1,prdata2,prdata3,prdata4,prdata5);


   input               clk;
   input                      reset;
   
   input [24-1:0]      cmd_addr;
   
   input                      psel;
   output [31:0]              prdata;
   output                     pready;
   output                     pslverr;
   
   output                     psel0;
   output                     psel1;
   output                     psel2;
   output                     psel3;
   output                     psel4;
   output                     psel5;
   
   input                      pready0;
   input                      pready1;
   input                      pready2;
   input                      pready3;
   input                      pready4;
   input                      pready5;
   
   input                      pslverr0;
   input                      pslverr1;
   input                      pslverr2;
   input                      pslverr3;
   input                      pslverr4;
   input                      pslverr5;

   input [31:0]               prdata0;
   input [31:0]               prdata1;
   input [31:0]               prdata2;
   input [31:0]               prdata3;
   input [31:0]               prdata4;
   input [31:0]               prdata5;
   

   
   parameter                  ADDR_MSB = 23;
   parameter                  ADDR_LSB = 16;
   
   reg                        pready;
   reg                        pslverr_pre;
   reg                        pslverr;
   reg [31:0]                 prdata_pre;
   reg [31:0]                 prdata;
   
   reg [3-1:0]         slave_num;
   
   always @(*)
     begin
    casex (cmd_addr[ADDR_MSB:ADDR_LSB])
      8'h00 : slave_num = 3'd0;
      8'h01 : slave_num = 3'd1;
      8'h02 : slave_num = 3'd2;
      8'h03 : slave_num = 3'd3;
      8'h10 : slave_num = 3'd4;
      8'h11 : slave_num = 3'd5;
      
      default : slave_num = 3'd6; //decode error
    endcase
     end
   
   assign                     psel0 = psel & (slave_num == 3'd0);
   assign                     psel1 = psel & (slave_num == 3'd1);
   assign                     psel2 = psel & (slave_num == 3'd2);
   assign                     psel3 = psel & (slave_num == 3'd3);
   assign                     psel4 = psel & (slave_num == 3'd4);
   assign                     psel5 = psel & (slave_num == 3'd5);
              
   always @(*)
     begin
       case (slave_num)
         3'd0: pready = pready0;
         3'd1: pready = pready1;
         3'd2: pready = pready2;
         3'd3: pready = pready3;
         3'd4: pready = pready4;
         3'd5: pready = pready5;
         default : pready = 1'b1; //decode error
           endcase
     end
   
   always @(*)
     begin
       case (slave_num)
         3'd0: pslverr_pre = pslverr0;
         3'd1: pslverr_pre = pslverr1;
         3'd2: pslverr_pre = pslverr2;
         3'd3: pslverr_pre = pslverr3;
         3'd4: pslverr_pre = pslverr4;
         3'd5: pslverr_pre = pslverr5;
         default : pslverr_pre = 1'b1; //decode error
           endcase
     end
   
   always @(*)
     begin
       case (slave_num)
         3'd0: prdata_pre = prdata0;
         3'd1: prdata_pre = prdata1;
         3'd2: prdata_pre = prdata2;
         3'd3: prdata_pre = prdata3;
         3'd4: prdata_pre = prdata4;
         3'd5: prdata_pre = prdata5;
         default : prdata_pre = {32{1'b0}};
           endcase
     end
   
   
   always @(posedge clk or posedge reset)
     if (reset)
       begin
         prdata  <= #1 {32{1'b0}};
         pslverr <= #1 1'b0;
       end
     else if (psel & pready)
       begin
         prdata  <= #1 prdata_pre;
         pslverr <= #1 pslverr_pre;
       end
     else if (~psel)
       begin
         prdata  <= #1 {32{1'b0}};
         pslverr <= #1 1'b0;
       end
   
endmodule

   


