//------------------------------------------------------------------
//-- File generated by RobustVerilog parser
//-- RobustVerilog version 1.2g (limited free version)
//-- Invoked Tue Jul 21 10:05:11 2020
//-- Source file: axi2apb_wr.v
//-- Parent file: axi2apb.v
//-- Run directory: C:/RobustVerilog_free1.2_win/
//-- Target directory: out/
//-- Command flags: src/base/axi2apb.v -od out -I src/gen -list list.txt -listpath -header -gui 
//-- www.provartec.com/edatools ... info@provartec.com
//------------------------------------------------------------------





module  axi2apb_wr (clk,reset,psel,penable,pwrite,paddr,pwdata,prdata,pslverr,pready,cmd_err,cmd_id,finish_wr,WID,WDATA,WSTRB,WLAST,WVALID,WREADY,BID,BRESP,BVALID,BREADY);

   input                   clk;
   input                   reset;
   
   input                  psel;
   input                  penable;
   input                  pwrite;
   input [31:0]           paddr;
   input [31:0]           pwdata;
   input [31:0]           prdata;
   input                  pslverr;
   input                  pready;
      
   input                  cmd_err;
   input [16-1:0]    cmd_id;
   output                 finish_wr;
   
   input [15:0]           WID;
   input [31:0]           WDATA;
   input [3:0]            WSTRB;
   input                  WLAST;
   input                  WVALID;
   output                 WREADY;
   output [15:0]          BID;
   output [1:0]           BRESP;
   output                 BVALID;
   input                  BREADY;
   
   
   parameter              RESP_OK     = 2'b00;
   parameter              RESP_SLVERR = 2'b10;
   parameter              RESP_DECERR = 2'b11;
   
   reg [15:0]             BID;
   reg [1:0]              BRESP;
   reg                    BVALID;
   
   
   assign                 finish_wr = BVALID & BREADY;
   
   assign                 WREADY = psel & penable & pwrite & pready;
   
   always @(posedge clk or posedge reset)
     if (reset)
       begin
         BID <= #1 {16{1'b0}};
         BRESP <= #1 {2{1'b0}};
         BVALID <= #1 {1{1'b0}};
       end
     else if (finish_wr)
       begin
         BID <= #1 {16{1'b0}};
         BRESP <= #1 {2{1'b0}};
         BVALID <= #1 {1{1'b0}};
       end
     else if (psel & penable & pwrite & pready)
       begin
         BID    <= #1 cmd_id;
         BRESP  <= #1 cmd_err ? RESP_SLVERR : pslverr ? RESP_DECERR : RESP_OK;
         BVALID <= #1 1'b1;
       end
       
endmodule

   


